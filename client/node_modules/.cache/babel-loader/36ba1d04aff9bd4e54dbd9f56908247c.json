{"ast":null,"code":"var _jsxFileName = \"/Users/erikwoodworth/Coding/ARC/data-arc/src/components/Table-SE/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { StickyTable, Row, Cell } from 'react-sticky-table';\nimport numeral from 'numeral';\nimport 'react-sticky-table/dist/react-sticky-table.css';\n\nvar TableSE = function TableSE(props) {\n  var selectedFields = props.selectedFields;\n  var sortField = props.sortField;\n  var sortOrder = props.sortOrder;\n  var featureArray = props.data ? props.data.features.map(function (feature) {\n    return feature;\n  }).sort(sortOrder === 'hilo' ? function (a, b) {\n    return a.properties[sortField] > b.properties[sortField] ? -1 : 1;\n  } : function (a, b) {\n    return a.properties[sortField] > b.properties[sortField] ? 1 : -1;\n  }) : null;\n  var fieldArray = props.data ? props.data.fields : null;\n  console.log(sortField);\n  return React.createElement(StickyTable, {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    stickHeaderCount: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Row, {\n    style: {\n      marginLeft: '40px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, selectedFields ? selectedFields.map(function (columnLabel, index) {\n    return React.createElement(Cell, {\n      style: {\n        backgroundColor: 'white',\n        height: '40px'\n      },\n      key: \"column-\" + columnLabel,\n      title: columnLabel,\n      value: columnLabel,\n      onClick: function onClick() {\n        return props.handleSortField(columnLabel, props.sortOrder === 'lohi' ? 'hilo' : 'lohi');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, fieldArray ? fieldArray.map(function (item) {\n      return item.name === columnLabel ? item.alias : columnLabel;\n    }) : columnLabel);\n  }) : null), featureArray ? featureArray.map(function (feature, i) {\n    return React.createElement(Row, {\n      key: 'row-' + i // onMouseEnter={props.handleHover(feature.properties[props.hoverField])}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, selectedFields ? selectedFields.map(function (fieldName) {\n      var fieldType = fieldArray ? fieldArray.map(function (item) {\n        return item.name === fieldName ? item.type : null;\n      }) : null;\n      var value = feature.properties[fieldName];\n      var formattedValue = fieldType === 'esriFieldTypeInteger' ? numeral(value).format('0,0') : value;\n      return React.createElement(Cell // onMouseEnter={props.handleHover(feature.properties[props.hoverField])}\n      , {\n        key: 'cell' + fieldName + '-' + feature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, formattedValue);\n    }) : null);\n  }) : null);\n};\n\nexport default TableSE;","map":{"version":3,"sources":["/Users/erikwoodworth/Coding/ARC/data-arc/src/components/Table-SE/index.js"],"names":["React","useState","useEffect","StickyTable","Row","Cell","numeral","TableSE","props","selectedFields","sortField","sortOrder","featureArray","data","features","map","feature","sort","a","b","properties","fieldArray","fields","console","log","width","height","marginLeft","columnLabel","index","backgroundColor","handleSortField","item","name","alias","i","fieldName","fieldType","type","value","formattedValue","format"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n \nimport { StickyTable, Row, Cell } from 'react-sticky-table';\nimport numeral from 'numeral';\n\nimport 'react-sticky-table/dist/react-sticky-table.css';\n\nconst TableSE = props => {\n\n    const selectedFields = props.selectedFields;\n\n    const sortField = props.sortField;\n    const sortOrder = props.sortOrder;\n\n    const featureArray = props.data ? \n                            props.data.features.map(feature => feature)\n                            .sort(sortOrder === 'hilo' ? (a,b) => a.properties[sortField] > b.properties[sortField] ? -1 : 1 : (a,b) => a.properties[sortField] > b.properties[sortField] ? 1 : -1)\n                            : null;\n\n    const fieldArray = props.data ? props.data.fields : null;\n    console.log(sortField);\n\n\n    return (\n          <StickyTable style={{width: '100%', height: '100%'}} stickHeaderCount={1}>\n            <Row style={{marginLeft: '40px'}}>\n                {selectedFields ? selectedFields.map((columnLabel,index) => \n                    <Cell\n                        style={{backgroundColor: 'white', height: '40px'}}\n                        key={\"column-\" + columnLabel} \n                        title={columnLabel}\n                        value={columnLabel}\n                        onClick={() => props.handleSortField(columnLabel, props.sortOrder === 'lohi' ? 'hilo' : 'lohi')}\n                    >\n                        {fieldArray ? fieldArray.map(item => item.name === columnLabel ? item.alias: columnLabel) : columnLabel}\n                    </Cell>\n                ) : null }\n            </Row>\n\n            {featureArray ? featureArray.map((feature, i) => {\n                return(\n                    <Row \n                    key={'row-' + i}\n                    // onMouseEnter={props.handleHover(feature.properties[props.hoverField])}\n                    >\n                        {selectedFields ? selectedFields.map(fieldName => {\n                            const fieldType = fieldArray ? fieldArray.map(item => item.name === fieldName ? item.type: null) : null\n                            const value = feature.properties[fieldName]\n                            const formattedValue =  fieldType === 'esriFieldTypeInteger' ? numeral(value).format('0,0') : value;\n                        return(\n                        <Cell \n                        // onMouseEnter={props.handleHover(feature.properties[props.hoverField])}\n\n                        key={'cell' + fieldName + '-' + feature}>\n                           {formattedValue}\n                        </Cell>\n                        )}) : null }\n                    </Row>\n                    )\n            }) : null }\n\n\n            \n          </StickyTable>\n    )\n}\n\nexport default TableSE;"]},"metadata":{},"sourceType":"module"}