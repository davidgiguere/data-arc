{"ast":null,"code":"import _toConsumableArray from \"/Users/erikwoodworth/Coding/ARC/data-arc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/erikwoodworth/Coding/ARC/data-arc/src/components/Charts/ScatterPlot/index.js\";\nimport React from 'react';\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts'; // import { Dropdown } from 'react-bootstrap';\n// import dataConfig from \"../../../config/dataConfig\";\n\nimport colormap from 'colormap';\nimport numeral from 'numeral';\nimport './style.css';\n\nvar ScatterPlot = function ScatterPlot(props) {\n  var numberOfBins = props.layout.numberOfBins;\n  var colorMap = props.layout.colorMap;\n  var reverse = props.layout.colorMapReverse;\n  var colors = reverse ? colormap({\n    colormap: colorMap,\n    nshades: numberOfBins,\n    format: 'hex',\n    alpha: 1\n  }).reverse() : colormap({\n    colormap: colorMap,\n    nshades: numberOfBins,\n    format: 'hex',\n    alpha: 1\n  });\n  var valueArray = props.data ? props.data.features.filter(function (feature) {\n    return feature.properties[props.selectedVariable];\n  }).map(function (feature) {\n    var variable = feature.properties[props.selectedVariable];\n    var normalizer = props.data.normalizedBy ? feature.properties[props.data.normalizedBy] : 1;\n    return variable / normalizer;\n  }) : null;\n  var maxValue = valueArray !== null ? Math.max.apply(Math, _toConsumableArray(valueArray)) : 'Value array not load yet';\n  var minValue = valueArray !== null ? Math.min.apply(Math, _toConsumableArray(valueArray)) : 'Value array not load yet';\n  var dataArray = props.data ? props.data.features.map(function (feature) {\n    return {\n      x: feature.properties[props.selectedVariable],\n      y: feature.properties[props.selectedSecondVar],\n      name: feature.properties[props.hoverField]\n    };\n  }) : null; // const dataObject = dataConfig.filter(item => item.name === props.data.geography);\n  // const indicatorList = dataObject && props.data.geography ? dataObject[0].variableOptions : null;\n  // console.log (indicatorList);  \n\n  return React.createElement(ResponsiveContainer, {\n    height: \"100%\",\n    width: \"100%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(ScatterChart, {\n    margin: {\n      top: 40,\n      right: 15,\n      bottom: 20,\n      left: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(CartesianGrid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(XAxis // hide\n  , {\n    type: \"number\",\n    dataKey: \"x\",\n    name: props.data ? props.selectedVariable : null,\n    label: {\n      value: props.data ? props.selectedVariable : 'x',\n      position: 'bottom'\n    },\n    unit: null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(YAxis // hide\n  , {\n    orientation: \"right\",\n    type: \"number\",\n    dataKey: \"y\",\n    name: props.data ? props.selectedSecondVar : null,\n    label: {\n      value: props.data ? props.selectedSecondVar : 'y',\n      position: 'right',\n      angle: -90\n    },\n    unit: null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    cursor: {\n      strokeDasharray: '3 3'\n    },\n    animationEasing: 'ease',\n    formatter: function formatter(value) {\n      return typeof value === 'number' ? value % 1 !== 0 ? numeral(value).format('0,0.00') : numeral(value).format('0,0') : value;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(Scatter, {\n    name: props.hoverField,\n    data: dataArray,\n    onMouseEnter: function onMouseEnter(point) {\n      return props.handleHover(point.name);\n    } // fill={colors[0]}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, dataArray ? dataArray.map(function (feature, index) {\n    var value = feature.x; // const name=feature.name;\n    // console.log(feature);\n    // console.log(props.selectedVariable);\n\n    var distFromMin = value - minValue;\n    var range = maxValue - minValue;\n    var binningRatio = distFromMin / range;\n    var indexRange = numberOfBins - 1; // const opacity = value;\n\n    var color = colors[Math.floor(value === 0 ? 0 : binningRatio * indexRange)];\n    return React.createElement(Cell, {\n      key: \"cell-\".concat(index),\n      fill: color // stroke={props.hoverID && name === props.hoverID ? 'black' : null}\n      // strokeWidth={props.hoverID && name === props.hoverID ? 2 : null}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    });\n  }) : null), React.createElement(Scatter, {\n    name: props.hoverField,\n    data: props.hoverID && dataArray ? dataArray.filter(function (e) {\n      return e.name === props.hoverID;\n    }) : null,\n    fill: colors[numberOfBins - 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, dataArray ? dataArray.filter(function (e) {\n    return e.name === props.hoverID;\n  }).map(function (feature, index) {\n    var value = feature.x; // const name=feature.name;\n    // console.log(feature);\n    // console.log(props.selectedVariable);\n\n    var distFromMin = value - minValue;\n    var range = maxValue - minValue;\n    var binningRatio = distFromMin / range;\n    var indexRange = numberOfBins - 1; // const opacity = value;\n\n    var color = colors[Math.floor(value === 0 ? 0 : binningRatio * indexRange)];\n    return React.createElement(Cell, {\n      key: \"cell-\".concat(index),\n      fill: color,\n      stroke: 'black',\n      strokeWidth: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    });\n  }) : null)));\n};\n\nexport default ScatterPlot;","map":{"version":3,"sources":["/Users/erikwoodworth/Coding/ARC/data-arc/src/components/Charts/ScatterPlot/index.js"],"names":["React","ScatterChart","Scatter","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","Cell","colormap","numeral","ScatterPlot","props","numberOfBins","layout","colorMap","reverse","colorMapReverse","colors","nshades","format","alpha","valueArray","data","features","filter","feature","properties","selectedVariable","map","variable","normalizer","normalizedBy","maxValue","Math","max","minValue","min","dataArray","x","y","selectedSecondVar","name","hoverField","top","right","bottom","left","value","position","angle","strokeDasharray","point","handleHover","index","distFromMin","range","binningRatio","indexRange","color","floor","hoverID","e"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';\n// import { Dropdown } from 'react-bootstrap';\n// import dataConfig from \"../../../config/dataConfig\";\nimport colormap from 'colormap';\nimport numeral from 'numeral';\nimport './style.css';\n\nconst ScatterPlot = props => {\n\n  const numberOfBins = props.layout.numberOfBins;\n  const colorMap = props.layout.colorMap;\n  const reverse = props.layout.colorMapReverse;\n\n  const colors = reverse ? colormap({\n      colormap: colorMap,\n      nshades: numberOfBins,\n      format: 'hex',\n      alpha: 1\n    }).reverse() : colormap({\n      colormap: colorMap,\n      nshades: numberOfBins,\n      format: 'hex',\n      alpha: 1\n    });\n\n  const valueArray = props.data ? props.data.features\n    .filter(feature => feature.properties[props.selectedVariable])\n    .map(feature => {\n  \n      const variable = feature.properties[props.selectedVariable];\n      const normalizer=props.data.normalizedBy ? feature.properties[props.data.normalizedBy] : 1\n\n        return variable/normalizer}) : null;\n\n  const maxValue = valueArray !== null ? Math.max(...valueArray) : 'Value array not load yet';\n  const minValue = valueArray !== null ? Math.min(...valueArray) : 'Value array not load yet';\n\n  const dataArray = props.data ? props.data.features.map(feature => \n    ({\n      x: feature.properties[props.selectedVariable],\n      y: feature.properties[props.selectedSecondVar],\n      name: feature.properties[props.hoverField]\n    })\n    ) : null;\n\n  // const dataObject = dataConfig.filter(item => item.name === props.data.geography);\n\n  // const indicatorList = dataObject && props.data.geography ? dataObject[0].variableOptions : null;\n\n  // console.log (indicatorList);  \n\n  return (\n      <ResponsiveContainer height=\"100%\" width=\"100%\">\n        <ScatterChart\n          margin={{\n            top: 40, right: 15, bottom: 20, left: 30,\n          }} >\n          <CartesianGrid />\n          <XAxis \n            // hide\n            type=\"number\" \n            dataKey=\"x\" \n            name={props.data ? props.selectedVariable : null } \n            label={{\n              value: props.data ? props.selectedVariable : 'x',\n              position: 'bottom'\n            }}\n            unit={null} />\n          <YAxis \n            // hide\n            orientation=\"right\"\n            type=\"number\" \n            dataKey=\"y\" \n            name={props.data ? props.selectedSecondVar : null } \n            label={{\n              value: props.data ? props.selectedSecondVar : 'y',\n              position: 'right',\n              angle: -90\n            }} \n            unit={null} />\n          <Tooltip\n            cursor={{ strokeDasharray: '3 3' }} \n            animationEasing={'ease'}\n            formatter={ value => \n              typeof value === 'number' ? \n              value % 1 !== 0 ? \n              numeral(value).format('0,0.00') \n              : numeral(value).format('0,0')\n              : value\n              }\n          />\n          <Scatter \n            name={props.hoverField} \n            data={dataArray} \n            onMouseEnter={point => props.handleHover(point.name)} \n            // fill={colors[0]}\n            >\n            {\n              dataArray ? dataArray.map((feature, index) => {\n                \n                const value=feature.x;\n                // const name=feature.name;\n\n                // console.log(feature);\n        \n                // console.log(props.selectedVariable);\n                const distFromMin = value - minValue;\n                const range = maxValue - minValue;\n                const binningRatio = distFromMin/range;\n                const indexRange = numberOfBins - 1;\n                // const opacity = value;\n                const color = colors[Math.floor(value === 0 ? 0 : binningRatio * indexRange)];\n                \n\n                return <Cell \n                  key={`cell-${index}`} \n                  fill={color} \n                  // stroke={props.hoverID && name === props.hoverID ? 'black' : null}\n                  // strokeWidth={props.hoverID && name === props.hoverID ? 2 : null}\n                  />\n              }) : null\n            }\n          </Scatter>\n          <Scatter \n            name={props.hoverField} \n            data={props.hoverID && dataArray ? dataArray.filter(e => e.name === props.hoverID) : null} fill={colors[numberOfBins-1]}\n            >\n            {\n              dataArray ? dataArray.filter(e => e.name === props.hoverID).map((feature, index) => {\n                \n                const value=feature.x;\n                // const name=feature.name;\n\n                // console.log(feature);\n        \n                // console.log(props.selectedVariable);\n                const distFromMin = value - minValue;\n                const range = maxValue - minValue;\n                const binningRatio = distFromMin/range;\n                const indexRange = numberOfBins - 1;\n                // const opacity = value;\n                const color = colors[Math.floor(value === 0 ? 0 : binningRatio * indexRange)];\n                \n\n                return <Cell \n                  key={`cell-${index}`} \n                  fill={color} \n                  stroke={'black'}\n                  strokeWidth={2}\n                  />\n              }) : null\n            }\n          </Scatter>\n        </ScatterChart>\n      </ResponsiveContainer>\n  );\n};\n\nexport default ScatterPlot;\n\n\n"]},"metadata":{},"sourceType":"module"}