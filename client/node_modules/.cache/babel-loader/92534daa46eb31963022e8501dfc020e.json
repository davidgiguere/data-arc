{"ast":null,"code":"import _slicedToArray from \"/Users/erikwoodworth/Coding/ARC/data-arc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/erikwoodworth/Coding/ARC/data-arc/src/components/LayoutWrapper/index.js\";\nimport React, { useState, useEffect } from 'react'; // import ReactGridLayout from 'react-grid-layout';\n\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport defaults from '../../config/defaults';\nimport DataTable from '../Table';\nimport DataSelector from '../DataSelector';\nimport MapWrapper from '../MapWrapper';\nimport ChartWrapper from '../ChartWrapper';\nimport { ExportToCsv } from 'export-to-csv';\nimport Loader from 'react-loader-spinner';\nimport API from '../../utils/API';\nimport './style.css';\nimport ColorRamp from '../Legends/ColorRamp';\nimport DataManifest from '../../config/DataManifest.json';\n\nvar LayoutWrapper = function LayoutWrapper() {\n  // console.log(DataManifest);\n  var _useState = useState({\n    mapVisible: defaults.layout.mapView.visible,\n    tableVisible: defaults.layout.tableView.visible,\n    chartVisible: defaults.layout.chartView.visible,\n    colorMap: 'temperature',\n    numberOfBins: 72,\n    colorMapReverse: false,\n    // chartType: 'scatterplot',\n    colorOpacity: .8\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      layout = _useState2[0],\n      setLayout = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      serviceID = _useState4[0],\n      setServiceID = _useState4[1];\n\n  var _useState5 = useState('NAME'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sortField = _useState6[0],\n      setSortField = _useState6[1];\n\n  var _useState7 = useState('lohi'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sortOrder = _useState8[0],\n      setSortOrder = _useState8[1];\n\n  var _useState9 = useState('County'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      sumLevel = _useState10[0],\n      setSumLevel = _useState10[1];\n\n  var _useState11 = useState('ARC 10'),\n      _useState12 = _slicedToArray(_useState11, 2),\n      plngRegion = _useState12[0],\n      setPlngRegion = _useState12[1];\n\n  var _useState13 = useState(['NAME', 'GEOID']),\n      _useState14 = _slicedToArray(_useState13, 2),\n      selectedFields = _useState14[0],\n      setSelectedFields = _useState14[1];\n\n  var _useState15 = useState('GEOID'),\n      _useState16 = _slicedToArray(_useState15, 2),\n      hoverField = _useState16[0],\n      setHoverField = _useState16[1];\n\n  var _useState17 = useState(),\n      _useState18 = _slicedToArray(_useState17, 2),\n      hoverID = _useState18[0],\n      setHoverID = _useState18[1];\n\n  var _useState19 = useState(),\n      _useState20 = _slicedToArray(_useState19, 2),\n      fieldOptions = _useState20[0],\n      setFieldOptions = _useState20[1];\n\n  var _useState21 = useState('TotPop_00'),\n      _useState22 = _slicedToArray(_useState21, 2),\n      mapField = _useState22[0],\n      setMapField = _useState22[1];\n\n  var _useState23 = useState(),\n      _useState24 = _slicedToArray(_useState23, 2),\n      data = _useState24[0],\n      setData = _useState24[1];\n\n  var _useState25 = useState(),\n      _useState26 = _slicedToArray(_useState25, 2),\n      csvData = _useState26[0],\n      setCSVData = _useState26[1];\n\n  var _useState27 = useState('nodata'),\n      _useState28 = _slicedToArray(_useState27, 2),\n      csvStatus = _useState28[0],\n      setCSVStatus = _useState28[1];\n\n  var _useState29 = useState('geojson'),\n      _useState30 = _slicedToArray(_useState29, 2),\n      fileType = _useState30[0],\n      setFileType = _useState30[1];\n\n  var getData = function getData(baseurl, categoryID, geo, fields) {\n    // console.log(geo)\n    setData(); // setSelectedFields(['NAME','GEOID']);\n\n    setFieldOptions();\n    var url = \"\".concat(baseurl).concat(categoryID, \"/query?where=SumLevel='\").concat(geo, \"'&outFields=\").concat(fields, \"&f=\").concat(fileType);\n    API.getData(url).then(function (res) {\n      console.log(res);\n      var optionsArray = fileType === 'json' ? res.data.fields.map(function (field) {\n        return {\n          key: field.name,\n          text: field.alias,\n          value: field.name\n        };\n      }) : fileType === 'geojson' ? Object.keys(res.data.features[0].properties).map(function (field) {\n        return {\n          key: field,\n          text: field,\n          value: field\n        };\n      }) : fieldOptions; // console.log(optionsArray);\n\n      setData(res.data);\n      setFieldOptions(optionsArray);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n\n  var handleSortField = function handleSortField(fieldAlias, sortOrder) {\n    setSortField(fieldAlias);\n    setSortOrder(sortOrder);\n  };\n\n  var handleHover = function handleHover(featureID) {\n    setHoverID(featureID);\n  }; // For CSV Export\n\n\n  var handleCSVData = function handleCSVData(baseurl, categoryID, geo, fields) {\n    var url = \"\".concat(baseurl).concat(categoryID, \"/query?where=SumLevel='\").concat(geo, \"'&returnGeometry=false&outFields=\").concat(fields, \"&f=json\");\n    API.getData(url).then(function (res) {\n      console.log(res.data.features);\n      var dataArray = res.data.features.map(function (feature) {\n        return feature.attributes;\n      });\n      console.log(dataArray);\n      setCSVData(dataArray);\n      setCSVStatus('ready');\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n\n  var downloadCSV = function downloadCSV() {\n    var csvFilename = sumLevel + '-' + serviceID.toString() + '-download';\n    var csvTitle = 'Test';\n    var csvOptions = {\n      fieldSeparator: ',',\n      quoteStrings: '\"',\n      decimalSeparator: '.',\n      filename: csvFilename,\n      showTitle: false,\n      title: csvTitle,\n      useTextFile: false,\n      useKeysAsHeaders: true // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n\n    };\n    var csvExporter = new ExportToCsv(csvOptions);\n    csvExporter.generateCsv(csvData);\n    setCSVData();\n    setCSVStatus('nodata');\n  };\n\n  useEffect(function () {\n    return getData(defaults.data.baseUrl, serviceID, sumLevel, '*');\n  }, [serviceID, sumLevel]);\n  return React.createElement(Grid, {\n    fluid: true,\n    style: {\n      height: '100vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Row, {\n    style: {\n      height: '15vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(DataSelector, {\n    setServiceID: setServiceID,\n    setSelectedFields: setSelectedFields,\n    setFieldOptions: setFieldOptions,\n    handleCSVData: handleCSVData,\n    downloadCSV: downloadCSV,\n    setCSVStatus: setCSVStatus,\n    setCSVData: setCSVData,\n    setSumLevel: setSumLevel,\n    setMapField: setMapField,\n    serviceID: serviceID,\n    sumLevel: sumLevel,\n    data: data,\n    selectedFields: selectedFields,\n    csvStatus: csvStatus,\n    fieldOptions: fieldOptions,\n    hoverField: hoverField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })), React.createElement(Row, {\n    style: {\n      height: '80vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(Col, {\n    sm: 12,\n    lg: 6,\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(Row, {\n    className: \"no-scrollbar\",\n    middle: \"sm\",\n    style: {\n      marginTop: '30px',\n      height: '50%',\n      width: '100%',\n      overflow: 'scroll'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, layout.tableVisible && data ? React.createElement(DataTable, {\n    selectedFields: selectedFields,\n    data: data,\n    sortField: sortField,\n    handleSortField: handleSortField,\n    sortOrder: sortOrder,\n    hoverID: hoverID,\n    handleHover: handleHover,\n    hoverField: hoverField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%',\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(Loader, {\n    id: \"loader-box\",\n    type: \"Grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }))), React.createElement(Row, {\n    center: \"sm\",\n    middle: \"sm\",\n    style: {\n      height: '50%',\n      width: '100%',\n      zIndex: '99999'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, layout.chartVisible && data ? React.createElement(ChartWrapper, {\n    selectedVariable: mapField,\n    data: data,\n    layout: layout,\n    handleHover: handleHover,\n    hoverID: hoverID,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%',\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(Loader, {\n    id: \"loader-box\",\n    type: \"Grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  })))), React.createElement(Col, {\n    sm: 12,\n    lg: 6,\n    style: {\n      height: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, layout.mapVisible ? React.createElement(MapWrapper, {\n    hoverID: hoverID,\n    handleHover: handleHover,\n    hoverField: hoverField,\n    selectedVariable: mapField,\n    layout: layout,\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }) : React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"Map not loading\"), React.createElement(ColorRamp, {\n    selectedVariable: mapField,\n    data: data,\n    layout: layout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }))));\n};\n\nexport default LayoutWrapper;","map":{"version":3,"sources":["/Users/erikwoodworth/Coding/ARC/data-arc/src/components/LayoutWrapper/index.js"],"names":["React","useState","useEffect","Grid","Row","Col","defaults","DataTable","DataSelector","MapWrapper","ChartWrapper","ExportToCsv","Loader","API","ColorRamp","DataManifest","LayoutWrapper","mapVisible","layout","mapView","visible","tableVisible","tableView","chartVisible","chartView","colorMap","numberOfBins","colorMapReverse","colorOpacity","setLayout","serviceID","setServiceID","sortField","setSortField","sortOrder","setSortOrder","sumLevel","setSumLevel","plngRegion","setPlngRegion","selectedFields","setSelectedFields","hoverField","setHoverField","hoverID","setHoverID","fieldOptions","setFieldOptions","mapField","setMapField","data","setData","csvData","setCSVData","csvStatus","setCSVStatus","fileType","setFileType","getData","baseurl","categoryID","geo","fields","url","then","res","console","log","optionsArray","map","field","key","name","text","alias","value","Object","keys","features","properties","catch","err","handleSortField","fieldAlias","handleHover","featureID","handleCSVData","dataArray","feature","attributes","downloadCSV","csvFilename","toString","csvTitle","csvOptions","fieldSeparator","quoteStrings","decimalSeparator","filename","showTitle","title","useTextFile","useKeysAsHeaders","csvExporter","generateCsv","baseUrl","height","width","marginTop","overflow","position","textAlign","zIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import ReactGridLayout from 'react-grid-layout';\nimport {Grid, Row, Col} from 'react-flexbox-grid';\nimport defaults from '../../config/defaults';\nimport DataTable from '../Table';\nimport DataSelector from '../DataSelector';\nimport MapWrapper from '../MapWrapper';\nimport ChartWrapper from '../ChartWrapper';\nimport { ExportToCsv } from 'export-to-csv';\nimport Loader from 'react-loader-spinner';\nimport API from '../../utils/API'\nimport './style.css';\nimport ColorRamp from '../Legends/ColorRamp';\nimport DataManifest from '../../config/DataManifest.json'\n\nconst LayoutWrapper = () => {\n\n    // console.log(DataManifest);\n\n    const [layout, setLayout] = useState({\n        mapVisible: defaults.layout.mapView.visible,\n        tableVisible: defaults.layout.tableView.visible,\n        chartVisible: defaults.layout.chartView.visible,\n        colorMap: 'temperature',\n        numberOfBins: 72,\n        colorMapReverse: false,\n        // chartType: 'scatterplot',\n        colorOpacity: .8\n    });\n\n    const [serviceID, setServiceID] = useState(0);\n    const [sortField, setSortField] = useState('NAME');\n    const [sortOrder, setSortOrder] = useState('lohi');\n    const [sumLevel, setSumLevel] = useState('County');\n    const [plngRegion, setPlngRegion] = useState('ARC 10')\n    const [selectedFields, setSelectedFields] = useState(['NAME', 'GEOID']);\n    const [hoverField, setHoverField] = useState('GEOID');\n    const [hoverID, setHoverID] = useState();\n    const [fieldOptions, setFieldOptions] = useState();\n    const [mapField, setMapField] = useState('TotPop_00')\n    const [data, setData] = useState();\n    const [csvData, setCSVData] = useState();\n    const [csvStatus, setCSVStatus] = useState('nodata');\n    const [fileType, setFileType] = useState('geojson')\n\n\n    const getData = (baseurl, categoryID, geo, fields) => {\n        // console.log(geo)\n        setData();\n\n        // setSelectedFields(['NAME','GEOID']);\n\n        setFieldOptions();\n        \n        const url = `${baseurl}${categoryID}/query?where=SumLevel='${geo}'&outFields=${fields}&f=${fileType}`;\n        API.getData(url)\n            .then(res => {\n                console.log(res);\n                const optionsArray = fileType === 'json' ? res.data.fields.map(field => \n                    ({\n                        key : field.name,\n                        text : field.alias,\n                        value : field.name\n                    })\n                ) : fileType === 'geojson' ? \n                    Object.keys(res.data.features[0].properties)\n                        .map(field =>  ({\n                            key : field,\n                            text : field, \n                            value : field\n                        })) : fieldOptions;\n                                        \n                // console.log(optionsArray);\n                setData(res.data);\n                setFieldOptions(optionsArray);\n            })\n            .catch(err => console.log(err));\n\n    }\n\n    const handleSortField = (fieldAlias, sortOrder) => {\n        setSortField(fieldAlias);\n        setSortOrder(sortOrder);\n    }\n\n    const handleHover = featureID => {\n        setHoverID(featureID);\n      }\n\n\n\n    // For CSV Export\n\n    const handleCSVData = (baseurl, categoryID, geo, fields) => {\n        const url = `${baseurl}${categoryID}/query?where=SumLevel='${geo}'&returnGeometry=false&outFields=${fields}&f=json`;\n\n        API.getData(url)\n            .then(res => {\n                console.log(res.data.features);\n                const dataArray = res.data.features.map(feature => feature.attributes);\n                console.log(dataArray);\n                setCSVData(dataArray);\n                setCSVStatus('ready');\n            })\n            .catch(err => console.log(err))\n    }\n\n    const downloadCSV = () => {\n        const csvFilename = sumLevel + '-' + serviceID.toString() +  '-download';\n        const csvTitle = 'Test';\n    \n        const csvOptions = \n            { \n                fieldSeparator: ',',\n                quoteStrings: '\"',\n                decimalSeparator: '.',\n                filename: csvFilename, \n                showTitle: false,\n                title: csvTitle,\n                useTextFile: false,\n                useKeysAsHeaders: true,\n                // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n            };\n\n        const csvExporter = new ExportToCsv(csvOptions);\n\n        csvExporter.generateCsv(csvData);\n        \n        setCSVData();\n        setCSVStatus('nodata');\n    }\n\n\n    useEffect(() => getData(defaults.data.baseUrl, serviceID, sumLevel, '*'), [serviceID, sumLevel]);\n    \n    return (\n        <Grid fluid style={{height: '100vh'}}>\n            <Row style={{height: '15vh'}}>\n                <DataSelector\n                    setServiceID={setServiceID}\n                    setSelectedFields={setSelectedFields}\n                    setFieldOptions={setFieldOptions}\n                    handleCSVData={handleCSVData}\n                    downloadCSV={downloadCSV}\n                    setCSVStatus={setCSVStatus}\n                    setCSVData={setCSVData}\n                    setSumLevel={setSumLevel}\n                    setMapField={setMapField}\n                    serviceID={serviceID}\n                    sumLevel={sumLevel}\n                    data={data}\n                    selectedFields={selectedFields}\n                    csvStatus={csvStatus}\n                    fieldOptions={fieldOptions}\n                    hoverField={hoverField}\n                />\n            </Row>\n            <Row style={{height: '80vh'}}>\n                <Col sm={12} lg={6} style={{height: '100%', width: '100%'}}>\n                    <Row className='no-scrollbar' middle='sm' style={{marginTop: '30px', height: '50%', width: '100%', overflow: 'scroll'}}>\n                        { layout.tableVisible && data ?\n                        <DataTable\n                            selectedFields={selectedFields} \n                            data={data}\n                            sortField={sortField}\n                            handleSortField={handleSortField}\n                            sortOrder={sortOrder}\n                            hoverID={hoverID}\n                            handleHover={handleHover}\n                            hoverField={hoverField}\n                        /> : \n                        <div style={{position: 'relative', width: '100%', textAlign: 'center'}}>\n                            <Loader id='loader-box' type='Grid' />\n                        </div>}\n                    </Row>\n                    <Row center='sm' middle='sm' style={{height: '50%', width: '100%', zIndex: '99999'}}>\n                        { layout.chartVisible && data ? \n                        <ChartWrapper \n                            selectedVariable={mapField}\n                            data={data} \n                            layout={layout}\n                            handleHover={handleHover}\n                            hoverID={hoverID} \n                        />  : \n                        <div style={{position: 'relative', width: '100%', textAlign: 'center'}}>\n                            <Loader id='loader-box' type='Grid' />\n                        </div> }\n                    </Row>\n                </Col>\n                <Col sm={12} lg={6} style={{height: '100%'}}>  \n                    { layout.mapVisible ? \n                    <MapWrapper\n                        hoverID={hoverID}\n                        handleHover={handleHover}\n                        hoverField={hoverField} \n                        selectedVariable={mapField} \n                        layout={layout} \n                        data={data} /> \n                    : <h1>Map not loading</h1> }\n                    <ColorRamp selectedVariable={mapField} data={data} layout={layout} />\n                </Col>\n            </Row>\n        </Grid>\n    );\n}\n\nexport default LayoutWrapper;"]},"metadata":{},"sourceType":"module"}