{"ast":null,"code":"var _jsxFileName = \"/Users/erikwoodworth/Coding/ARC/data-arc/src/components/Table/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport numeral from 'numeral'; // import Loader from 'react-loader-spinner';\n\nimport './style.css';\n\nvar DataTable = function DataTable(props) {\n  var selectedFields = props.selectedFields;\n  var sortField = props.sortField;\n  var sortOrder = props.sortOrder;\n  var featureArray = props.data ? props.data.features.map(function (feature) {\n    return feature;\n  }).sort(sortOrder === 'hilo' ? function (a, b) {\n    return a.properties[sortField] > b.properties[sortField] ? -1 : 1;\n  } : function (a, b) {\n    return a.properties[sortField] > b.properties[sortField] ? 1 : -1;\n  }) : null; // const fieldArray = props.data ? props.data.fields : null;\n\n  console.log(sortField);\n  return React.createElement(Table, {\n    style: {\n      borderRadius: '5px',\n      marginLeft: '15px',\n      height: '100%',\n      width: '100%',\n      float: 'left'\n    },\n    celled: true,\n    striped: true,\n    sortable: true,\n    selectable: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, selectedFields ? selectedFields.map(function (columnLabel, index) {\n    return React.createElement(Table.HeaderCell, {\n      key: \"column-\" + columnLabel,\n      title: columnLabel,\n      value: columnLabel,\n      onClick: function onClick() {\n        return props.handleSortField(columnLabel, props.sortOrder === 'lohi' ? 'hilo' : 'lohi');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, selectedFields ? selectedFields.map(function (item) {\n      return item.name === columnLabel ? item.alias : columnLabel;\n    }) : columnLabel);\n  }) : null), React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, featureArray ? featureArray.map(function (feature, i) {\n    return React.createElement(Table.Row, {\n      key: 'row-' + i // onMouseEnter={props.handleHover(feature.properties[props.hoverField])}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, selectedFields ? selectedFields.map(function (fieldName) {\n      // const fieldType = selectedFields ? selectedFields.map(item => item.name === fieldName ? item.type: null) : null\n      var value = feature.properties[fieldName]; // const formattedValue =  fieldType === 'esriFieldTypeInteger' ? numeral(value).format('0,0') : value;\n\n      return React.createElement(Table.Cell, {\n        // onMouseEnter={props.handleHover(feature.properties[props.hoverField])}\n        key: 'cell' + fieldName + '-' + feature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, value);\n    }) : null);\n  }) : null));\n};\n\nexport default DataTable;","map":{"version":3,"sources":["/Users/erikwoodworth/Coding/ARC/data-arc/src/components/Table/index.js"],"names":["React","useState","useEffect","Table","numeral","DataTable","props","selectedFields","sortField","sortOrder","featureArray","data","features","map","feature","sort","a","b","properties","console","log","borderRadius","marginLeft","height","width","float","columnLabel","index","handleSortField","item","name","alias","i","fieldName","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport numeral from 'numeral';\n// import Loader from 'react-loader-spinner';\nimport './style.css';\n\nconst DataTable = props => {\n\n    const selectedFields = props.selectedFields;\n\n    const sortField = props.sortField;\n    const sortOrder = props.sortOrder;\n\n    const featureArray = props.data ? \n                            props.data.features.map(feature => feature)\n                            .sort(sortOrder === 'hilo' ? (a,b) => a.properties[sortField] > b.properties[sortField] ? -1 : 1 : (a,b) => a.properties[sortField] > b.properties[sortField] ? 1 : -1)\n                            : null;\n\n    // const fieldArray = props.data ? props.data.fields : null;\n    console.log(sortField);\n\n        \n    return (\n        <Table \n        style={{\n            borderRadius: '5px' ,\n            marginLeft: '15px', \n            height: '100%', \n            width: '100%',\n            float: 'left'\n            }}\n        celled \n        striped \n        sortable\n        selectable\n        >\n\n            <Table.Header >\n                {selectedFields ? selectedFields.map((columnLabel,index) => \n                    <Table.HeaderCell\n                        key={\"column-\" + columnLabel} \n                        title={columnLabel}\n                        value={columnLabel}\n                        onClick={() => props.handleSortField(columnLabel, props.sortOrder === 'lohi' ? 'hilo' : 'lohi')}\n                    >\n                        {selectedFields ? selectedFields.map(item => item.name === columnLabel ? item.alias: columnLabel) : columnLabel}\n                    </Table.HeaderCell>\n                ) : null }\n\n            </Table.Header>\n            <Table.Body>\n\n            {featureArray ? featureArray.map((feature, i) => {\n                return(\n                    <Table.Row \n                    key={'row-' + i}\n                    // onMouseEnter={props.handleHover(feature.properties[props.hoverField])}\n                    >\n                        {selectedFields ? selectedFields.map(fieldName => {\n                            // const fieldType = selectedFields ? selectedFields.map(item => item.name === fieldName ? item.type: null) : null\n                            const value = feature.properties[fieldName]\n                            // const formattedValue =  fieldType === 'esriFieldTypeInteger' ? numeral(value).format('0,0') : value;\n                        return(\n                        <Table.Cell \n                        // onMouseEnter={props.handleHover(feature.properties[props.hoverField])}\n\n                        key={'cell' + fieldName + '-' + feature}>\n                           {value}\n                        </Table.Cell>\n                        )}) : null }\n                    </Table.Row>\n                    )\n            }) : null }\n\n            </Table.Body>\n\n        </Table>\n    );\n};\n\nexport default DataTable;\n\n"]},"metadata":{},"sourceType":"module"}